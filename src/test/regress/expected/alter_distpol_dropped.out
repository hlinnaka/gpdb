-- MPP-5928
-- We want to test a whole bunch of different type configurations and whether
-- ATSDB can handle them as dropped types
-- Here's a script to generate all this:
--align="int2 int4 char double"
--length="variable 1 3 4 11 17 19 23 32 196"
--pbv="true false"
--storage="true false"
--
--for a in $align
--do
--	for l in $length
--	do
--		for p in $pbv
--		do
--			for s in $storage
--			do
--				if [ $p == "true" ] && [ $l != "variable" ] && [ $l -gt 8 ];
--				then
--					continue
--				fi
--				if [ $p == "true" ] && [ $l == "variable" ];
--				then
--					continue
--				fi
--				echo "
--drop table alter_distpol_g;
--create type break;
--create function breakin (cstring) returns break as 'textin' language internal;
--create function breakout (break) returns cstring as 'textout' language internal;"
--
--				echo "create type break (input = breakin, output = breakout, internallength = $l, passedbyvalue = $p, alignment = $a);"
--				echo "
--create table alter_distpol_g (i int, j break, k text) with (appendonly = $s);
--insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
--alter table alter_distpol_g drop column j;
--select * from alter_distpol_g order by 1;
--alter table alter_distpol_g set with(reorganize = true) distributed randomly;
--select * from alter_distpol_g order by 1;
--drop type break cascade;
--alter table alter_distpol_g set with(reorganize = true) distributed randomly;
--select * from alter_distpol_g order by 1;"
--			done
--		done
--	done
--done
drop table alter_distpol_g;
ERROR:  table "alter_distpol_g" does not exist
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = variable, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_133977_2_3 is only a shell
NOTICE:  argument type pg_atsdb_133977_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_133977_2_3_out(pg_atsdb_133977_2_3)
NOTICE:  drop cascades to function pg_atsdb_133977_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = variable, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_134127_2_3 is only a shell
NOTICE:  argument type pg_atsdb_134127_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_134127_2_3_out(pg_atsdb_134127_2_3)
NOTICE:  drop cascades to function pg_atsdb_134127_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = true, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_134265_2_3 is only a shell
NOTICE:  argument type pg_atsdb_134265_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_134265_2_3_out(pg_atsdb_134265_2_3)
NOTICE:  drop cascades to function pg_atsdb_134265_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = true, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_134415_2_3 is only a shell
NOTICE:  argument type pg_atsdb_134415_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_134415_2_3_out(pg_atsdb_134415_2_3)
NOTICE:  drop cascades to function pg_atsdb_134415_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_134553_2_3 is only a shell
NOTICE:  argument type pg_atsdb_134553_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_134553_2_3_out(pg_atsdb_134553_2_3)
NOTICE:  drop cascades to function pg_atsdb_134553_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_134703_2_3 is only a shell
NOTICE:  argument type pg_atsdb_134703_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_134703_2_3_out(pg_atsdb_134703_2_3)
NOTICE:  drop cascades to function pg_atsdb_134703_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = true, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_134841_2_3 is only a shell
NOTICE:  argument type pg_atsdb_134841_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_134841_2_3_out(pg_atsdb_134841_2_3)
NOTICE:  drop cascades to function pg_atsdb_134841_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = true, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_134991_2_3 is only a shell
NOTICE:  argument type pg_atsdb_134991_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_134991_2_3_out(pg_atsdb_134991_2_3)
NOTICE:  drop cascades to function pg_atsdb_134991_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_135129_2_3 is only a shell
NOTICE:  argument type pg_atsdb_135129_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_135129_2_3_out(pg_atsdb_135129_2_3)
NOTICE:  drop cascades to function pg_atsdb_135129_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_135279_2_3 is only a shell
NOTICE:  argument type pg_atsdb_135279_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_135279_2_3_out(pg_atsdb_135279_2_3)
NOTICE:  drop cascades to function pg_atsdb_135279_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = true, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_135417_2_3 is only a shell
NOTICE:  argument type pg_atsdb_135417_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_135417_2_3_out(pg_atsdb_135417_2_3)
NOTICE:  drop cascades to function pg_atsdb_135417_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = true, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_135567_2_3 is only a shell
NOTICE:  argument type pg_atsdb_135567_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_135567_2_3_out(pg_atsdb_135567_2_3)
NOTICE:  drop cascades to function pg_atsdb_135567_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_135705_2_3 is only a shell
NOTICE:  argument type pg_atsdb_135705_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_135705_2_3_out(pg_atsdb_135705_2_3)
NOTICE:  drop cascades to function pg_atsdb_135705_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_135855_2_3 is only a shell
NOTICE:  argument type pg_atsdb_135855_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_135855_2_3_out(pg_atsdb_135855_2_3)
NOTICE:  drop cascades to function pg_atsdb_135855_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 11, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_135993_2_3 is only a shell
NOTICE:  argument type pg_atsdb_135993_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_135993_2_3_out(pg_atsdb_135993_2_3)
NOTICE:  drop cascades to function pg_atsdb_135993_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 11, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_136143_2_3 is only a shell
NOTICE:  argument type pg_atsdb_136143_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_136143_2_3_out(pg_atsdb_136143_2_3)
NOTICE:  drop cascades to function pg_atsdb_136143_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 17, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_136281_2_3 is only a shell
NOTICE:  argument type pg_atsdb_136281_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_136281_2_3_out(pg_atsdb_136281_2_3)
NOTICE:  drop cascades to function pg_atsdb_136281_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 17, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_136431_2_3 is only a shell
NOTICE:  argument type pg_atsdb_136431_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_136431_2_3_out(pg_atsdb_136431_2_3)
NOTICE:  drop cascades to function pg_atsdb_136431_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 19, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_136569_2_3 is only a shell
NOTICE:  argument type pg_atsdb_136569_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_136569_2_3_out(pg_atsdb_136569_2_3)
NOTICE:  drop cascades to function pg_atsdb_136569_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 19, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_136719_2_3 is only a shell
NOTICE:  argument type pg_atsdb_136719_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_136719_2_3_out(pg_atsdb_136719_2_3)
NOTICE:  drop cascades to function pg_atsdb_136719_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 23, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_136857_2_3 is only a shell
NOTICE:  argument type pg_atsdb_136857_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_136857_2_3_out(pg_atsdb_136857_2_3)
NOTICE:  drop cascades to function pg_atsdb_136857_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 23, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_137007_2_3 is only a shell
NOTICE:  argument type pg_atsdb_137007_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_137007_2_3_out(pg_atsdb_137007_2_3)
NOTICE:  drop cascades to function pg_atsdb_137007_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 32, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_137145_2_3 is only a shell
NOTICE:  argument type pg_atsdb_137145_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_137145_2_3_out(pg_atsdb_137145_2_3)
NOTICE:  drop cascades to function pg_atsdb_137145_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 32, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_137295_2_3 is only a shell
NOTICE:  argument type pg_atsdb_137295_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_137295_2_3_out(pg_atsdb_137295_2_3)
NOTICE:  drop cascades to function pg_atsdb_137295_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 196, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_137433_2_3 is only a shell
NOTICE:  argument type pg_atsdb_137433_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_137433_2_3_out(pg_atsdb_137433_2_3)
NOTICE:  drop cascades to function pg_atsdb_137433_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 196, passedbyvalue = false, alignment = int2);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_137583_2_3 is only a shell
NOTICE:  argument type pg_atsdb_137583_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_137583_2_3_out(pg_atsdb_137583_2_3)
NOTICE:  drop cascades to function pg_atsdb_137583_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = variable, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = variable, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = true, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_138001_2_3 is only a shell
NOTICE:  argument type pg_atsdb_138001_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_138001_2_3_out(pg_atsdb_138001_2_3)
NOTICE:  drop cascades to function pg_atsdb_138001_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = true, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_138151_2_3 is only a shell
NOTICE:  argument type pg_atsdb_138151_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_138151_2_3_out(pg_atsdb_138151_2_3)
NOTICE:  drop cascades to function pg_atsdb_138151_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_138289_2_3 is only a shell
NOTICE:  argument type pg_atsdb_138289_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_138289_2_3_out(pg_atsdb_138289_2_3)
NOTICE:  drop cascades to function pg_atsdb_138289_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_138439_2_3 is only a shell
NOTICE:  argument type pg_atsdb_138439_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_138439_2_3_out(pg_atsdb_138439_2_3)
NOTICE:  drop cascades to function pg_atsdb_138439_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = true, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_138577_2_3 is only a shell
NOTICE:  argument type pg_atsdb_138577_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_138577_2_3_out(pg_atsdb_138577_2_3)
NOTICE:  drop cascades to function pg_atsdb_138577_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = true, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_138727_2_3 is only a shell
NOTICE:  argument type pg_atsdb_138727_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_138727_2_3_out(pg_atsdb_138727_2_3)
NOTICE:  drop cascades to function pg_atsdb_138727_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_138865_2_3 is only a shell
NOTICE:  argument type pg_atsdb_138865_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_138865_2_3_out(pg_atsdb_138865_2_3)
NOTICE:  drop cascades to function pg_atsdb_138865_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_139015_2_3 is only a shell
NOTICE:  argument type pg_atsdb_139015_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_139015_2_3_out(pg_atsdb_139015_2_3)
NOTICE:  drop cascades to function pg_atsdb_139015_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = true, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = true, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 11, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_139713_2_3 is only a shell
NOTICE:  argument type pg_atsdb_139713_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_139713_2_3_out(pg_atsdb_139713_2_3)
NOTICE:  drop cascades to function pg_atsdb_139713_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 11, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_139863_2_3 is only a shell
NOTICE:  argument type pg_atsdb_139863_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_139863_2_3_out(pg_atsdb_139863_2_3)
NOTICE:  drop cascades to function pg_atsdb_139863_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 17, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_140001_2_3 is only a shell
NOTICE:  argument type pg_atsdb_140001_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_140001_2_3_out(pg_atsdb_140001_2_3)
NOTICE:  drop cascades to function pg_atsdb_140001_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 17, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_140151_2_3 is only a shell
NOTICE:  argument type pg_atsdb_140151_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_140151_2_3_out(pg_atsdb_140151_2_3)
NOTICE:  drop cascades to function pg_atsdb_140151_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 19, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_140289_2_3 is only a shell
NOTICE:  argument type pg_atsdb_140289_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_140289_2_3_out(pg_atsdb_140289_2_3)
NOTICE:  drop cascades to function pg_atsdb_140289_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 19, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_140439_2_3 is only a shell
NOTICE:  argument type pg_atsdb_140439_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_140439_2_3_out(pg_atsdb_140439_2_3)
NOTICE:  drop cascades to function pg_atsdb_140439_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 23, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_140577_2_3 is only a shell
NOTICE:  argument type pg_atsdb_140577_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_140577_2_3_out(pg_atsdb_140577_2_3)
NOTICE:  drop cascades to function pg_atsdb_140577_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 23, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_140727_2_3 is only a shell
NOTICE:  argument type pg_atsdb_140727_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_140727_2_3_out(pg_atsdb_140727_2_3)
NOTICE:  drop cascades to function pg_atsdb_140727_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 32, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_140865_2_3 is only a shell
NOTICE:  argument type pg_atsdb_140865_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_140865_2_3_out(pg_atsdb_140865_2_3)
NOTICE:  drop cascades to function pg_atsdb_140865_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 32, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_141015_2_3 is only a shell
NOTICE:  argument type pg_atsdb_141015_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_141015_2_3_out(pg_atsdb_141015_2_3)
NOTICE:  drop cascades to function pg_atsdb_141015_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 196, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_141153_2_3 is only a shell
NOTICE:  argument type pg_atsdb_141153_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_141153_2_3_out(pg_atsdb_141153_2_3)
NOTICE:  drop cascades to function pg_atsdb_141153_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 196, passedbyvalue = false, alignment = int4);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_141303_2_3 is only a shell
NOTICE:  argument type pg_atsdb_141303_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_141303_2_3_out(pg_atsdb_141303_2_3)
NOTICE:  drop cascades to function pg_atsdb_141303_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = variable, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_141441_2_3 is only a shell
NOTICE:  argument type pg_atsdb_141441_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_141441_2_3_out(pg_atsdb_141441_2_3)
NOTICE:  drop cascades to function pg_atsdb_141441_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = variable, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_141591_2_3 is only a shell
NOTICE:  argument type pg_atsdb_141591_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_141591_2_3_out(pg_atsdb_141591_2_3)
NOTICE:  drop cascades to function pg_atsdb_141591_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = true, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = true, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = true, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_142289_2_3 is only a shell
NOTICE:  argument type pg_atsdb_142289_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_142289_2_3_out(pg_atsdb_142289_2_3)
NOTICE:  drop cascades to function pg_atsdb_142289_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = true, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_142439_2_3 is only a shell
NOTICE:  argument type pg_atsdb_142439_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_142439_2_3_out(pg_atsdb_142439_2_3)
NOTICE:  drop cascades to function pg_atsdb_142439_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_142577_2_3 is only a shell
NOTICE:  argument type pg_atsdb_142577_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_142577_2_3_out(pg_atsdb_142577_2_3)
NOTICE:  drop cascades to function pg_atsdb_142577_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_142727_2_3 is only a shell
NOTICE:  argument type pg_atsdb_142727_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_142727_2_3_out(pg_atsdb_142727_2_3)
NOTICE:  drop cascades to function pg_atsdb_142727_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = true, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_142865_2_3 is only a shell
NOTICE:  argument type pg_atsdb_142865_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_142865_2_3_out(pg_atsdb_142865_2_3)
NOTICE:  drop cascades to function pg_atsdb_142865_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = true, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_143015_2_3 is only a shell
NOTICE:  argument type pg_atsdb_143015_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_143015_2_3_out(pg_atsdb_143015_2_3)
NOTICE:  drop cascades to function pg_atsdb_143015_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_143153_2_3 is only a shell
NOTICE:  argument type pg_atsdb_143153_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_143153_2_3_out(pg_atsdb_143153_2_3)
NOTICE:  drop cascades to function pg_atsdb_143153_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_143303_2_3 is only a shell
NOTICE:  argument type pg_atsdb_143303_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_143303_2_3_out(pg_atsdb_143303_2_3)
NOTICE:  drop cascades to function pg_atsdb_143303_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 11, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_143441_2_3 is only a shell
NOTICE:  argument type pg_atsdb_143441_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_143441_2_3_out(pg_atsdb_143441_2_3)
NOTICE:  drop cascades to function pg_atsdb_143441_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 11, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_143591_2_3 is only a shell
NOTICE:  argument type pg_atsdb_143591_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_143591_2_3_out(pg_atsdb_143591_2_3)
NOTICE:  drop cascades to function pg_atsdb_143591_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 17, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_143729_2_3 is only a shell
NOTICE:  argument type pg_atsdb_143729_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_143729_2_3_out(pg_atsdb_143729_2_3)
NOTICE:  drop cascades to function pg_atsdb_143729_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 17, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_143879_2_3 is only a shell
NOTICE:  argument type pg_atsdb_143879_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_143879_2_3_out(pg_atsdb_143879_2_3)
NOTICE:  drop cascades to function pg_atsdb_143879_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 19, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_144017_2_3 is only a shell
NOTICE:  argument type pg_atsdb_144017_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_144017_2_3_out(pg_atsdb_144017_2_3)
NOTICE:  drop cascades to function pg_atsdb_144017_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 19, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_144167_2_3 is only a shell
NOTICE:  argument type pg_atsdb_144167_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_144167_2_3_out(pg_atsdb_144167_2_3)
NOTICE:  drop cascades to function pg_atsdb_144167_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 23, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_144305_2_3 is only a shell
NOTICE:  argument type pg_atsdb_144305_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_144305_2_3_out(pg_atsdb_144305_2_3)
NOTICE:  drop cascades to function pg_atsdb_144305_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 23, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_144455_2_3 is only a shell
NOTICE:  argument type pg_atsdb_144455_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_144455_2_3_out(pg_atsdb_144455_2_3)
NOTICE:  drop cascades to function pg_atsdb_144455_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 32, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_144593_2_3 is only a shell
NOTICE:  argument type pg_atsdb_144593_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_144593_2_3_out(pg_atsdb_144593_2_3)
NOTICE:  drop cascades to function pg_atsdb_144593_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 32, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_144743_2_3 is only a shell
NOTICE:  argument type pg_atsdb_144743_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_144743_2_3_out(pg_atsdb_144743_2_3)
NOTICE:  drop cascades to function pg_atsdb_144743_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 196, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_144881_2_3 is only a shell
NOTICE:  argument type pg_atsdb_144881_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_144881_2_3_out(pg_atsdb_144881_2_3)
NOTICE:  drop cascades to function pg_atsdb_144881_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 196, passedbyvalue = false, alignment = char);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_145031_2_3 is only a shell
NOTICE:  argument type pg_atsdb_145031_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_145031_2_3_out(pg_atsdb_145031_2_3)
NOTICE:  drop cascades to function pg_atsdb_145031_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = variable, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = variable, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = true, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_145449_2_3 is only a shell
NOTICE:  argument type pg_atsdb_145449_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_145449_2_3_out(pg_atsdb_145449_2_3)
NOTICE:  drop cascades to function pg_atsdb_145449_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = true, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_145599_2_3 is only a shell
NOTICE:  argument type pg_atsdb_145599_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_145599_2_3_out(pg_atsdb_145599_2_3)
NOTICE:  drop cascades to function pg_atsdb_145599_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_145737_2_3 is only a shell
NOTICE:  argument type pg_atsdb_145737_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_145737_2_3_out(pg_atsdb_145737_2_3)
NOTICE:  drop cascades to function pg_atsdb_145737_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 1, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_145887_2_3 is only a shell
NOTICE:  argument type pg_atsdb_145887_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_145887_2_3_out(pg_atsdb_145887_2_3)
NOTICE:  drop cascades to function pg_atsdb_145887_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = true, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_146025_2_3 is only a shell
NOTICE:  argument type pg_atsdb_146025_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_146025_2_3_out(pg_atsdb_146025_2_3)
NOTICE:  drop cascades to function pg_atsdb_146025_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = true, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_146175_2_3 is only a shell
NOTICE:  argument type pg_atsdb_146175_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_146175_2_3_out(pg_atsdb_146175_2_3)
NOTICE:  drop cascades to function pg_atsdb_146175_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_146313_2_3 is only a shell
NOTICE:  argument type pg_atsdb_146313_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_146313_2_3_out(pg_atsdb_146313_2_3)
NOTICE:  drop cascades to function pg_atsdb_146313_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 3, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_146463_2_3 is only a shell
NOTICE:  argument type pg_atsdb_146463_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_146463_2_3_out(pg_atsdb_146463_2_3)
NOTICE:  drop cascades to function pg_atsdb_146463_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = true, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_146601_2_3 is only a shell
NOTICE:  argument type pg_atsdb_146601_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_146601_2_3_out(pg_atsdb_146601_2_3)
NOTICE:  drop cascades to function pg_atsdb_146601_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = true, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_146751_2_3 is only a shell
NOTICE:  argument type pg_atsdb_146751_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_146751_2_3_out(pg_atsdb_146751_2_3)
NOTICE:  drop cascades to function pg_atsdb_146751_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_146889_2_3 is only a shell
NOTICE:  argument type pg_atsdb_146889_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_146889_2_3_out(pg_atsdb_146889_2_3)
NOTICE:  drop cascades to function pg_atsdb_146889_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 4, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_147039_2_3 is only a shell
NOTICE:  argument type pg_atsdb_147039_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_147039_2_3_out(pg_atsdb_147039_2_3)
NOTICE:  drop cascades to function pg_atsdb_147039_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 11, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_147177_2_3 is only a shell
NOTICE:  argument type pg_atsdb_147177_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_147177_2_3_out(pg_atsdb_147177_2_3)
NOTICE:  drop cascades to function pg_atsdb_147177_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 11, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_147327_2_3 is only a shell
NOTICE:  argument type pg_atsdb_147327_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_147327_2_3_out(pg_atsdb_147327_2_3)
NOTICE:  drop cascades to function pg_atsdb_147327_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 17, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_147465_2_3 is only a shell
NOTICE:  argument type pg_atsdb_147465_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_147465_2_3_out(pg_atsdb_147465_2_3)
NOTICE:  drop cascades to function pg_atsdb_147465_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 17, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_147615_2_3 is only a shell
NOTICE:  argument type pg_atsdb_147615_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_147615_2_3_out(pg_atsdb_147615_2_3)
NOTICE:  drop cascades to function pg_atsdb_147615_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 19, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_147753_2_3 is only a shell
NOTICE:  argument type pg_atsdb_147753_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_147753_2_3_out(pg_atsdb_147753_2_3)
NOTICE:  drop cascades to function pg_atsdb_147753_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 19, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_147903_2_3 is only a shell
NOTICE:  argument type pg_atsdb_147903_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_147903_2_3_out(pg_atsdb_147903_2_3)
NOTICE:  drop cascades to function pg_atsdb_147903_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 23, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_148041_2_3 is only a shell
NOTICE:  argument type pg_atsdb_148041_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_148041_2_3_out(pg_atsdb_148041_2_3)
NOTICE:  drop cascades to function pg_atsdb_148041_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 23, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_148191_2_3 is only a shell
NOTICE:  argument type pg_atsdb_148191_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_148191_2_3_out(pg_atsdb_148191_2_3)
NOTICE:  drop cascades to function pg_atsdb_148191_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 32, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 32, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 196, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_148609_2_3 is only a shell
NOTICE:  argument type pg_atsdb_148609_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_148609_2_3_out(pg_atsdb_148609_2_3)
NOTICE:  drop cascades to function pg_atsdb_148609_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
create type break;
create function breakin (cstring) returns break as 'textin' language internal;
NOTICE:  return type break is only a shell
create function breakout (break) returns cstring as 'textout' language internal;
NOTICE:  argument type break is only a shell
create type break (input = breakin, output = breakout, internallength = 196, passedbyvalue = false, alignment = double);
create table alter_distpol_g (i int, j break, k text) with (appendonly = false);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into alter_distpol_g (i, k) select i, i from generate_series(1, 10) i;
alter table alter_distpol_g drop column j;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

alter table alter_distpol_g set with(reorganize = true) distributed randomly;
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop type break cascade;
NOTICE:  drop cascades to function breakout(break)
NOTICE:  drop cascades to function breakin(cstring)
alter table alter_distpol_g set with(reorganize = true) distributed randomly;
NOTICE:  return type pg_atsdb_148759_2_3 is only a shell
NOTICE:  argument type pg_atsdb_148759_2_3 is only a shell
NOTICE:  drop cascades to function pg_atsdb_148759_2_3_out(pg_atsdb_148759_2_3)
NOTICE:  drop cascades to function pg_atsdb_148759_2_3_in(cstring)
select * from alter_distpol_g order by 1;
 i  | k  
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
  6 | 6
  7 | 7
  8 | 8
  9 | 9
 10 | 10
(10 rows)

drop table alter_distpol_g;
